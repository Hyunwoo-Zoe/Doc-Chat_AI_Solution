// üìÅ src/app/admin/vector/page.tsx
'use client';

import { useEffect, useState } from 'react';
import styled from 'styled-components';
import {
  Search, RefreshCw, Zap, Trash2, ClipboardCopy,
  Database, AlertCircle, CheckCircle2
} from 'lucide-react';
import * as Alert from '@radix-ui/react-alert-dialog';
import {
  fetchVectorStats,
  deleteVectorById,
  cleanupUnusedVectors,
  deleteAllVectors,
} from '@/services/adminApi';
import { toast } from 'sonner';

/* ------------------------------------------------------------------ */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ styled elements ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

const Wrapper = styled.main`
  min-height: 100vh;
  display: flex;
  justify-content: center;
  padding: 3rem 1rem;
  background: radial-gradient(ellipse at top right, hsl(var(--primary) / 0.05), transparent 50%);
`;

const Panel = styled.section`
  width: 100%;
  max-width: 72rem;
  display: flex;
  flex-direction: column;
  gap: 2rem;
`;

const PageHead = styled.header`
  text-align: center;
  margin-bottom: 1rem;
  
  h2 {
    display: inline-flex;
    align-items: center;
    gap: .75rem;
    font-size: 2rem;
    font-weight: 700;
    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary) / 0.7));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 0.5rem;
  }
  
  p {
    color: hsl(var(--muted-foreground));
    font-size: 1rem;
  }
`;

const TabsContainer = styled.div`
  display: flex;
  gap: .5rem;
  padding: .5rem;
  background: hsl(var(--muted) / 0.5);
  border: 2px solid rgba(255, 255, 255, 0.15);
  border-radius: 1rem;
  width: fit-content;
  margin: 0 auto;
`;

const TabBtn = styled.button<{$active?: boolean; $danger?: boolean}>`
  padding: .75rem 1.5rem;
  border-radius: .75rem;
  font-size: .875rem;
  font-weight: 500;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
  
  ${({ $active }) => $active
    ? `
      background: hsl(var(--background));
      color: hsl(var(--foreground));
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    `
    : `
      background: transparent;
      color: hsl(var(--muted-foreground));
      
      &:hover {
        color: hsl(var(--foreground));
      }
    `}
    
  ${({ $danger, $active }) =>
    $danger && !$active && `
      color: hsl(var(--destructive));
      
      &:hover {
        color: hsl(var(--destructive));
        background: hsl(var(--destructive) / 0.1);
      }
    `}
`;

const Card = styled.div`
  border: 2px solid rgba(255, 255, 255, 0.2);
  background: hsl(var(--card));
  color: hsl(var(--card-foreground));
  border-radius: 1rem;
  overflow: hidden;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
  
  &:hover {
    border-color: rgba(255, 255, 255, 0.3);
  }
`;

const CardHeader = styled.div`
  padding: 1.5rem 2rem;
  border-bottom: 1px solid hsl(var(--border));
  background: hsl(var(--muted) / 0.3);
`;

const CardContent = styled.div`
  padding: 2rem;
`;

const SearchSection = styled.div`
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
  
  @media (max-width: 640px) {
    flex-direction: column;
  }
`;

const SearchInput = styled.input`
  flex: 1;
  height: 3rem;
  padding: 0 1rem 0 3rem;
  border-radius: .75rem;
  border: 2px solid rgba(255, 255, 255, 0.2);
  background: hsl(var(--background));
  font-size: .875rem;
  transition: all 0.2s ease;
  
  &:focus {
    outline: none;
    border-color: hsl(var(--primary));
    box-shadow: 0 0 0 3px hsl(var(--primary) / 0.1);
  }
  
  &:hover:not(:focus) {
    border-color: rgba(255, 255, 255, 0.3);
  }
`;

const SearchWrapper = styled.div`
  position: relative;
  flex: 1;
  
  svg {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    color: hsl(var(--muted-foreground));
  }
`;

const Btn = styled.button<{variant?: 'primary' | 'secondary' | 'danger'; size?: 'sm' | 'md'}>`
  height: ${({ size }) => size === 'sm' ? '2.25rem' : '3rem'};
  padding: ${({ size }) => size === 'sm' ? '0 0.75rem' : '0 1.5rem'};
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: .5rem;
  font-size: ${({ size }) => size === 'sm' ? '.8rem' : '.875rem'};
  font-weight: 500;
  border-radius: .5rem;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
  
  svg { 
    width: ${({ size }) => size === 'sm' ? '1rem' : '1.25rem'};
    height: ${({ size }) => size === 'sm' ? '1rem' : '1.25rem'};
  }

  ${({ variant }) => {
    switch (variant) {
      case 'secondary': return `
        background: hsl(var(--muted));
        color: hsl(var(--muted-foreground));
        
        &:hover:not(:disabled) {
          background: hsl(var(--muted) / 0.8);
          transform: translateY(-1px);
        }
      `;
      case 'danger': return `
        background: hsl(var(--destructive));
        color: hsl(var(--destructive-foreground));
        
        &:hover:not(:disabled) {
          background: hsl(var(--destructive) / 0.9);
          transform: translateY(-1px);
          box-shadow: 0 4px 12px hsl(var(--destructive) / 0.3);
        }
      `;
      default: return `
        background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary) / 0.9));
        color: hsl(var(--primary-foreground));
        
        &:hover:not(:disabled) {
          transform: translateY(-1px);
          box-shadow: 0 4px 12px hsl(var(--primary) / 0.3);
        }
      `;
    }
  }}
  
  &:active:not(:disabled) {
    transform: translateY(0);
  }
  
  &:disabled { 
    opacity: .6; 
    cursor: not-allowed; 
  }
`;

const VectorGrid = styled.div`
  display: grid;
  gap: .75rem;
`;

const VectorRow = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: hsl(var(--background));
  border: 2px solid rgba(255, 255, 255, 0.15);
  border-radius: .75rem;
  padding: 1rem 1.25rem;
  gap: 1rem;
  transition: all 0.2s ease;
  
  &:hover {
    border-color: rgba(255, 255, 255, 0.3);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transform: translateX(4px);
  }
  
  .id {
    font-family: monospace;
    font-size: .875rem;
    color: hsl(var(--foreground));
    word-break: break-all;
    flex: 1;
  }
  
  .actions {
    display: flex;
    gap: .5rem;
    flex-shrink: 0;
  }
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 4rem 2rem;
  color: hsl(var(--muted-foreground));
  
  svg {
    width: 3rem;
    height: 3rem;
    margin: 0 auto 1rem;
    opacity: 0.5;
  }
  
  p {
    font-size: .9rem;
  }
`;

const StatsBar = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: .75rem 1rem;
  background: hsl(var(--muted) / 0.3);
  border: 2px solid rgba(255, 255, 255, 0.1);
  border-radius: .5rem;
  margin-bottom: 1rem;
  
  .label {
    font-size: .875rem;
    color: hsl(var(--muted-foreground));
  }
  
  .count {
    font-weight: 600;
    color: hsl(var(--foreground));
    margin-left: .5rem;
  }
`;

const FeatureCard = styled.div`
  text-align: center;
  padding: 3rem 2rem;
  
  .icon-wrapper {
    width: 4rem;
    height: 4rem;
    margin: 0 auto 1.5rem;
    background: hsl(var(--primary) / 0.1);
    border-radius: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    
    svg {
      width: 2rem;
      height: 2rem;
      color: hsl(var(--primary));
    }
  }
  
  h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
  }
  
  p {
    color: hsl(var(--muted-foreground));
    margin-bottom: 2rem;
    line-height: 1.6;
  }
  
  &.danger {
    .icon-wrapper {
      background: hsl(var(--destructive) / 0.1);
      
      svg {
        color: hsl(var(--destructive));
      }
    }
  }
`;

// Alert Dialog Ïä§ÌÉÄÏùº
const AlertOverlay = styled(Alert.Overlay)`
  position: fixed;
  inset: 0;
  background: hsla(0 0% 0% / .5);
  backdrop-filter: blur(4px);
  animation: fadeIn 0.2s ease;
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
`;

const AlertContent = styled(Alert.Content)`
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  max-width: 28rem;
  background: hsl(var(--card));
  border: 2px solid rgba(255, 255, 255, 0.2);
  border-radius: 1rem;
  padding: 2rem;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  animation: slideIn 0.2s ease;
  
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translate(-50%, -48%);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%);
    }
  }

  h2 {
    font-size: 1.25rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: hsl(var(--destructive));
  }
  
  p {
    font-size: 0.875rem;
    color: hsl(var(--muted-foreground));
    line-height: 1.6;
  }
  
  footer {
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
  }
`;

/* ------------------------------------------------------------------ */

export default function VectorPage() {
  type Vec = { id: string };

  const [tab,     setTab]   = useState<'list'|'clean'|'all'>('list');
  const [vectors, setVec]   = useState<Vec[]>([]);
  const [view,    setView]  = useState<Vec[]>([]);
  const [term,    setTerm]  = useState('');
  const [busy,    setBusy]  = useState(false);

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ fetch list ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const load = async () => {
    setBusy(true);
    try {
      const res  = await fetchVectorStats();
      const arr: Vec[] = res.file_ids.map((id:string)=>({id}));
      setVec(arr); setView(arr);
      toast.success(`${arr.length}Í∞ú Î≤°ÌÑ∞ Î∂àÎü¨Ïò¥`);
    } catch {
      toast.error('Î≤°ÌÑ∞ Î™©Î°ùÏùÑ Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.');
    } finally { setBusy(false); }
  };
  useEffect(() => { load(); }, []);

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const search = () => {
    if (!term) return setView(vectors);
    const f = vectors.filter(v => v.id.toLowerCase().includes(term.toLowerCase()));
    setView(f);
    toast.success(`${f.length}Í∞ú Í≤∞Í≥º`);
  };

  const deleteOne = (id: string) =>
    toast.promise(
      deleteVectorById(id).then(() => {
        setVec(p => p.filter(v => v.id !== id));
        setView(p => p.filter(v => v.id !== id));
        return 'ÏÇ≠Ï†ú ÏôÑÎ£å';
      }),
      { loading: 'ÏÇ≠Ï†ú Ï§ë‚Ä¶', success: v => v, error: 'ÏÇ≠Ï†ú Ïã§Ìå®' },
    );

  // VectorPage Ïª¥Ìè¨ÎÑåÌä∏Ïùò cleanup Ìï®Ïàò ÏàòÏ†ï

// VectorPage Ïª¥Ìè¨ÎÑåÌä∏Ïùò cleanup Ìï®Ïàò ÏàòÏ†ï

// VectorPage Ïª¥Ìè¨ÎÑåÌä∏Ïùò cleanup Ìï®Ïàò ÏàòÏ†ï

const cleanup = async () => {
  setBusy(true);
  try {
    const result = await cleanupUnusedVectors();
    
    // ÏùëÎãµ Í≤ÄÏ¶ù
    if (result.error) {
      toast.error(result.message || 'Ï†ïÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      return;
    }
    
    // ÏÑ±Í≥µ Ï≤òÎ¶¨
    if (result.deleted_count > 0) {
      toast.success(`${result.deleted_count}Í∞úÏùò ÎØ∏ÏÇ¨Ïö© Î≤°ÌÑ∞Í∞Ä Ï†ïÎ¶¨ÎêòÏóàÏäµÎãàÎã§.`);
      // ÏÇ≠Ï†úÎêú Ìï≠Î™©Ïù¥ ÏûàÏùÑ ÎïåÎßå Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ® (ÌÜ†Ïä§Ìä∏ ÏóÜÏù¥)
      await loadWithoutToast();
    } else {
      toast.info('Ï†ïÎ¶¨Ìï† ÎØ∏ÏÇ¨Ïö© Î≤°ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§. Î™®Îì† Î≤°ÌÑ∞Í∞Ä Ï∫êÏãúÏóê Ï°¥Ïû¨Ìï©ÎãàÎã§.');
    }
    
  } catch (error) {
    console.error('Cleanup error:', error);
    toast.error('Î≤°ÌÑ∞ Ï†ïÎ¶¨ Ïã§Ìå®: ' + (error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'));
  } finally {
    setBusy(false);
  }
};

// ÌÜ†Ïä§Ìä∏ ÏóÜÏù¥ Î™©Î°ùÎßå ÏÉàÎ°úÍ≥†Ïπ®ÌïòÎäî Ìï®Ïàò Ï∂îÍ∞Ä
const loadWithoutToast = async () => {
  setBusy(true);
  try {
    const res = await fetchVectorStats();
    const arr: Vec[] = res.file_ids.map((id:string)=>({id}));
    setVec(arr); 
    setView(arr);
  } catch {
    // ÏóêÎü¨Îäî Î¨¥Ïãú (Ïù¥ÎØ∏ cleanupÏóêÏÑú Ï≤òÎ¶¨)
  } finally { 
    setBusy(false); 
  }
};
  const deleteAll = () =>
    toast.promise(
      deleteAllVectors().then(r => {
        setVec([]); setView([]);
        return `${r.deleted_count}Í∞ú ÏÇ≠Ï†ú`;
      }), { loading:'Ï†ÑÏ≤¥ ÏÇ≠Ï†ú‚Ä¶', success:v=>v, error:'ÏÇ≠Ï†ú Ïã§Ìå®' });

  const copyId = (id: string) => {
    navigator.clipboard.writeText(id).then(() =>
      toast.success('IDÍ∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.'));
  };

  /* ------------------------------------------------------------------ */
  return (
    <Wrapper>
      <Panel>
        <PageHead>
          <h2>
            <Database size={32} />
            Î≤°ÌÑ∞ Í¥ÄÎ¶¨
          </h2>
          <p>ChromaDBÏóê Ï†ÄÏû•Îêú Î≤°ÌÑ∞ Îç∞Ïù¥ÌÑ∞Î•º Í¥ÄÎ¶¨ÌïòÍ≥† ÏµúÏ†ÅÌôîÌï©ÎãàÎã§</p>
        </PageHead>

        {/* Tabs Î≤ÑÌäº */}
        <TabsContainer>
          <TabBtn $active={tab==='list'} onClick={()=>setTab('list')}>
            Î≤°ÌÑ∞ Ï°∞Ìöå
          </TabBtn>
          <TabBtn $active={tab==='clean'} onClick={()=>setTab('clean')}>
            ÎØ∏ÏÇ¨Ïö© Ï†ïÎ¶¨
          </TabBtn>
          <TabBtn $active={tab==='all'} $danger onClick={()=>setTab('all')}>
            Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
          </TabBtn>
        </TabsContainer>

        {/* ‚îÄ‚îÄ Tab : list ‚îÄ‚îÄ */}
        {tab==='list' && (
          <Card>
            <CardHeader>
              <h3 className="text-lg font-semibold">Î≤°ÌÑ∞ Î™©Î°ù</h3>
            </CardHeader>
            <CardContent>
              <SearchSection>
                <SearchWrapper>
                  <Search />
                  <SearchInput
                    placeholder="File IDÎ°ú Í≤ÄÏÉâ (Ïòà: 20240101T102030.pdf)"
                    value={term}
                    onChange={e=>setTerm(e.target.value)}
                    onKeyDown={e=>e.key==='Enter' && search()}
                  />
                </SearchWrapper>
                <Btn onClick={search} disabled={busy}>
                  <Search size={18} />
                  Í≤ÄÏÉâ
                </Btn>
                <Btn variant="secondary" onClick={load} disabled={busy}>
                  <RefreshCw size={18} />
                  ÏÉàÎ°úÍ≥†Ïπ®
                </Btn>
              </SearchSection>

              <StatsBar>
                <span className="label">
                  Ï†ÑÏ≤¥ Î≤°ÌÑ∞<span className="count">{vectors.length}</span>Í∞ú
                </span>
                <span className="label">
                  Í≤ÄÏÉâ Í≤∞Í≥º<span className="count">{view.length}</span>Í∞ú
                </span>
              </StatsBar>

              <VectorGrid>
                {busy ? (
                  <EmptyState>
                    <RefreshCw className="animate-spin" />
                    <p>Î≤°ÌÑ∞ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
                  </EmptyState>
                ) : view.length === 0 ? (
                  <EmptyState>
                    <Database />
                    <p>Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</p>
                  </EmptyState>
                ) : (
                  view.map(v => (
                    <VectorRow key={v.id}>
                      <span className="id">{v.id}</span>
                      <div className="actions">
                        <Btn variant="secondary" size="sm" onClick={() => copyId(v.id)}>
                          <ClipboardCopy />
                          Î≥µÏÇ¨
                        </Btn>
                        <Btn variant="danger" size="sm" onClick={() => deleteOne(v.id)}>
                          <Trash2 />
                          ÏÇ≠Ï†ú
                        </Btn>
                      </div>
                    </VectorRow>
                  ))
                )}
              </VectorGrid>
            </CardContent>
          </Card>
        )}

        {/* ‚îÄ‚îÄ Tab : clean ‚îÄ‚îÄ */}
        {tab==='clean' && (
          <Card>
            <CardContent>
              <FeatureCard>
                <div className="icon-wrapper">
                  <Zap />
                </div>
                <h3>ÎØ∏ÏÇ¨Ïö© Î≤°ÌÑ∞ Ï†ïÎ¶¨</h3>
                <p>
                  ChromaDBÏóêÎäî Ï°¥Ïû¨ÌïòÏßÄÎßå Redis Ï∫êÏãúÏóê ÏóÜÎäî Î≤°ÌÑ∞Î•º ÏûêÎèôÏúºÎ°ú Ï∞æÏïÑÏÑú ÏÇ≠Ï†úÌï©ÎãàÎã§.<br />
                  Ïù¥Î•º ÌÜµÌï¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Î•º Íπ®ÎÅóÌïòÍ≤å Ïú†ÏßÄÌï† Ïàò ÏûàÏäµÎãàÎã§.
                </p>
                <Btn onClick={cleanup}>
                  <CheckCircle2 />
                  Ï†ïÎ¶¨ Ïã§Ìñâ
                </Btn>
              </FeatureCard>
            </CardContent>
          </Card>
        )}

        {/* ‚îÄ‚îÄ Tab : all ‚îÄ‚îÄ */}
        {tab==='all' && (
          <Card>
            <CardContent>
              <FeatureCard className="danger">
                <div className="icon-wrapper">
                  <AlertCircle />
                </div>
                <h3>Ï†ÑÏ≤¥ Î≤°ÌÑ∞ ÏÇ≠Ï†ú</h3>
                <p>
                  ChromaDBÏóê Ï†ÄÏû•Îêú Î™®Îì† Î≤°ÌÑ∞ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.<br />
                  <strong>Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏúºÎãà Ïã†Ï§ëÌïòÍ≤å Í≤∞Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.</strong>
                </p>

                {/* Í≤ΩÍ≥† Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
                <Alert.Root>
                  <Alert.Trigger asChild>
                    <Btn variant="danger">
                      <Trash2 />
                      Î™®Îì† Î≤°ÌÑ∞ ÏÇ≠Ï†ú
                    </Btn>
                  </Alert.Trigger>

                  <Alert.Portal>
                    <AlertOverlay/>
                    <AlertContent>
                      <Alert.Title asChild>
                        <h2>
                          <AlertCircle />
                          Ï†ïÎßêÎ°ú Î™®Îì† Î≤°ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?
                        </h2>
                      </Alert.Title>
                      <Alert.Description asChild>
                        <p>
                          ChromaDBÏóê Ï†ÄÏû•Îêú <strong>Î™®Îì† Î≤°ÌÑ∞ Îç∞Ïù¥ÌÑ∞</strong>Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.<br />
                          Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏúºÎ©∞, ÏÇ≠Ï†ú ÌõÑÏóêÎäî Î≥µÍµ¨Ìï† Î∞©Î≤ïÏù¥ ÏóÜÏäµÎãàÎã§.
                        </p>
                      </Alert.Description>

                      <footer>
                        <Alert.Cancel asChild>
                          <Btn variant="secondary">Ï∑®ÏÜå</Btn>
                        </Alert.Cancel>
                        <Alert.Action asChild>
                          <Btn variant="danger" onClick={deleteAll}>ÌôïÏù∏</Btn>
                        </Alert.Action>
                      </footer>
                    </AlertContent>
                  </Alert.Portal>
                </Alert.Root>
              </FeatureCard>
            </CardContent>
          </Card>
        )}
      </Panel>
    </Wrapper>
  );
}